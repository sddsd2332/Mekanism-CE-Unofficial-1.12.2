# Gradle Properties
org.gradle.jvmargs = -Xmx3G

# Source Options
# Use Modern Java(9+) Syntax (Courtesy of Jabel)
use_modern_java_syntax = true
# Spotless automatically refactors your project from java code to jsons for a tidied, uniformed look
spotless = true
# Spotless Options
# CleanThat is a utility part of Spotless that refactors java code with more performant and cleaner code
cleanthat = true

# Compilation Options
generate_sources_jar = true
generate_javadocs_jar = false

# Mod Resource Generation
generate_mcmod_info = true
generate_pack_mcmeta = true

# Mod Information
mod_version = 9.8.11.175
root_package = mekanism
mod_id = mekanism
mod_name = Mekanism CE Unofficial
mcmp_version=2.5.3


# Mod Metadata (Optional)
mod_description = Tools and Machines
mod_url = https://github.com/sddsd2332/Mekanism-CE-Unofficial-1.12.2
mod_update_json =
# Delimit authors with commas
mod_authors = aidancbrady,thommy101,thiakil,pupnewfster,dizzyd
mod_credits = aidancbrady, thommy101, thiakil, unpairedbracket, CyanideX and many others
mod_logo_path =

# Mapping Properties
mapping_channel = stable
mapping_version = 39


# Run Configurations
minecraft_username = sddsd2332
extra_jvm_args =

# If any properties changes below this line, refresh gradle again to ensure everything is working correctly.

# Modify Minecraft Sources
# RetroFuturaGradle allows Minecraft sources to be edited, and have the changes reflected upon running it
# Good for previews when coremodding, or generally seeing how behaviours can change with certain code applied/unapplied
# Turning this on allows Minecraft sources to persist and not regenerate
change_minecraft_sources = false


# Tags
# A RetroFuturaGradle concept akin to Ant ReplaceTokens
# A class is generated at build-time for compilation, to describe properties that have values that could change at build time such as versioning
# Class name is configurable with the `tag_class_name` property
# Tag properties can be stated in the `tags.properties` file, references are allowed
use_tags = true
tag_class_name = ${root_package}.${mod_id}.Tags

# Access Transformers
# A way to change visibility of Minecraft's classes, methods and fields
# An example access transformer file is given in the path: `src/main/resources/example_at.cfg`
# AT files should be in the root of src/main/resources with the filename formatted as: `mod_id_at.cfg`
# Use the property `access_transformer_locations` to state custom AT files if you aren't using the default `mod_id_at.cfg` location
# If multiple locations are stated, use spaces as the delimiter
use_access_transformer = true
access_transformer_locations = ${mod_id}_at.cfg

# Mixins
# Powerful tool to do runtime description changes of classes, wiki: https://github.com/SpongePowered/Mixin/wiki
# Only use mixins once you understand the underlying structure
# A refmap is a json that denotes mapping conversions, this json is generated automatically, with the name `mixins.mod_id.refmap.json`
# Use the property `mixin_refmap` if you want it to use a different name, only one name is accepted
use_mixins = false
mixin_booter_version = 8.3
mixin_refmap = mixins.${mod_id}.refmap.json

# Coremods
# The most powerful way to change java classes at runtime, it is however very primitive with little documentation.
# Only make a coremod if you are absolutely sure of what you are doing
# Change the property `coremod_includes_mod` to false if your coremod doesn't have a @Mod annotation
# You MUST state a class name for `coremod_plugin_class_name` if you are making a coremod, the class should implement `IFMLLoadingPlugin`
is_coremod = true
coremod_includes_mod = true
coremod_plugin_class_name = mekanism.coremod.MekanismCoremod

# AssetMover
# Convenient way to allow downloading of assets from official vanilla Minecraft servers, CurseForge, or any direct links
# Documentation: https://github.com/CleanroomMC/AssetMover
use_asset_mover = false
asset_mover_version = 2.5
