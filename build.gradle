/**
 * It is advised that you do not edit anything in the build.gradle; unless you are sure of what you are doing
 */

import com.gtnewhorizons.retrofuturagradle.mcp.InjectTagsTask
import groovy.text.SimpleTemplateEngine
import org.jetbrains.gradle.ext.Gradle

plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id 'com.diffplug.spotless' version '6.19.0' apply false
    id 'org.jetbrains.gradle.plugin.idea-ext' version '1.1.7'
    id 'com.gtnewhorizons.retrofuturagradle' version '1.3.24'
    id 'com.matthewprenger.cursegradle' version '1.4.0' apply false
    id 'com.modrinth.minotaur' version '2.+' apply false
    id 'eclipse'
    id 'idea'
}
// Early Assertions
assertProperty 'mod_version'
assertProperty 'root_package'
assertProperty 'mod_id'
assertProperty 'mod_name'

assertSubProperties 'use_tags', 'tag_class_name'
assertSubProperties 'use_access_transformer', 'access_transformer_locations'
assertSubProperties 'use_mixins', 'mixin_booter_version', 'mixin_refmap'
assertSubProperties 'is_coremod', 'coremod_includes_mod', 'coremod_plugin_class_name'
assertSubProperties 'use_asset_mover', 'asset_mover_version'

warnAndSetDefaultProperty 'use_modern_java_syntax', false
warnAndSetDefaultProperty 'spotless', false
warnAndSetDefaultProperty 'generate_sources_jar', false
warnAndSetDefaultProperty 'generate_javadocs_jar', false
warnAndSetDefaultProperty 'generate_mcmod_info', false
warnAndSetDefaultProperty 'generate_pack_mcmeta', false
warnAndSetDefaultProperty 'mapping_channel', 'stable'
warnAndSetDefaultProperty 'mapping_version', '39'
warnAndSetDefaultProperty 'minecraft_username', 'Developer'
warnAndSetDefaultProperty 'change_minecraft_sources', false


if (project.property('spotless')) {
    apply plugin: 'com.diffplug.spotless'
}

version = project.property('mod_version')
group = project.property('root_package')
archivesBaseName = project.property('mod_name') + "-All"

tasks.decompressDecompiledSources.enabled !project.property('change_minecraft_sources').toBoolean()


defaultTasks 'fullBuild'


// Set the toolchain version to decouple the Java we run Gradle with from the Java used to compile and run the mod
java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(project.property('use_modern_java_syntax').toBoolean() ? 17 : 8))
        // Azul covers the most platforms for Java 8 toolchains, crucially including MacOS arm64
        vendor.set(JvmVendorSpec.AZUL)
    }
    // Generate sources and javadocs jars when building and publishing
    if (project.property('generate_sources_jar').toBoolean()) {
        withSourcesJar()
    }
    if (project.property('generate_javadocs_jar').toBoolean()) {
        withJavadocJar()
    }
}

configurations {
    embed
    implementation.extendsFrom(embed)
}


spotless {
    encoding 'UTF-8'
    format 'misc', {
        target '.gitignore'

        endWithNewline()
        indentWithSpaces()
        trimTrailingWhitespace()
    }

    java {
        target 'src/main/java/**/*.java', 'src/test/java/**/*.java'

        endWithNewline()
        formatAnnotations()
        importOrder()
        indentWithSpaces()
        removeUnusedImports()
        toggleOffOn()
        trimTrailingWhitespace()

        if (project.property('cleanthat')) {
            cleanthat().sourceCompatibility('1.8')
        }
    }

    json {
        target 'src/main/resources/**/*.json', 'src/test/resources/**/*.json'

        simple().indentWithSpaces(6)
    }
}


minecraft {
    mcVersion = '1.12.2'

    // MCP Mappings
    mcpMappingChannel = project.property('mapping_channel')
    mcpMappingVersion = project.property('mapping_version')

    // Set username here, the UUID will be looked up automatically
    username = project.property('minecraft_username')

    // Add any additional tweaker classes here
    // extraTweakClasses.add('org.spongepowered.asm.launch.MixinTweaker')

    // Add various JVM arguments here for runtime
    def args = ['-ea:' + project.group]
    if (project.property('is_coremod').toBoolean()) {
        args << '-Dfml.coreMods.load=' + project.coremod_plugin_class_name
    }
    if (project.property('use_mixins').toBoolean()) {
        args << '-Dmixin.hotSwap=true'
        args << '-Dmixin.checks.interfaces=true'
        args << '-Dmixin.debug.export=true'
    }

    extraRunJvmArguments.addAll(args)

    // Include and use dependencies' Access Transformer files
    useDependencyAccessTransformers = true

    if (project.property('use_tags').toBoolean()) {
        if (file('tags.properties').exists()) {
            def props = new Properties()
            file('tags.properties').withInputStream {
                props.load(it)
            }
            if (!props.isEmpty()) {
                injectedTags.putAll(props.collectEntries { k, v -> [(k): interpolate(v)] })
            }
        }
    }
}

repositories {
    maven {
        name 'CleanroomMC Maven'
        url 'https://maven.cleanroommc.com'
    }
}


dependencies {
    if (project.property('use_modern_java_syntax').toBoolean()) {
        annotationProcessor 'com.github.bsideup.jabel:jabel-javac-plugin:1.0.0'
        // Workaround for https://github.com/bsideup/jabel/issues/174
        annotationProcessor 'net.java.dev.jna:jna-platform:5.13.0'
        compileOnly('com.github.bsideup.jabel:jabel-javac-plugin:1.0.0') {
            transitive = false
        }
        // Allow jdk.unsupported classes like sun.misc.Unsafe, workaround for JDK-8206937 and fixes crashes in tests
        patchedMinecraft 'me.eigenraven.java8unsupported:java-8-unsupported-shim:1.0.0'
        // Include for tests
        testAnnotationProcessor "com.github.bsideup.jabel:jabel-javac-plugin:1.0.0"
        testCompileOnly("com.github.bsideup.jabel:jabel-javac-plugin:1.0.0") {
            transitive = false // We only care about the 1 annotation class
        }
    }
    if (project.property('use_asset_mover').toBoolean()) {
        implementation "com.cleanroommc:assetmover:${interpolate(project.property('asset_mover_version'))}"
    }
    if (project.property('use_mixins').toBoolean()) {
        // Change your mixin refmap name here:
        String mixin = modUtils.enableMixins("zone.rong:mixinbooter:${interpolate(project.property('mixin_booter_version'))}"
                , "" + interpolate(project.property('mixin_refmap')))
        api(mixin) {
            transitive = false
        }
        annotationProcessor 'org.ow2.asm:asm-debug-all:5.2'
        annotationProcessor 'com.google.guava:guava:24.1.1-jre'
        annotationProcessor 'com.google.code.gson:gson:2.8.6'
        annotationProcessor(mixin) {
            transitive = false
        }
    }
}

apply from: 'dependencies.gradle'


// Adds Access Transformer files to tasks
if (project.property('use_access_transformer').toBoolean()) {
    for (def location : interpolate(project.property('access_transformer_locations')).split(' ')) {
        def fileLocation = file("${project.projectDir}/src/main/resources/$location")
        if (fileLocation.exists()) {
            tasks.deobfuscateMergedJarToSrg.accessTransformerFiles.from(fileLocation)
            tasks.srgifyBinpatchedJar.accessTransformerFiles.from(fileLocation)
        } else {
            throw new GradleException("Access Transformer file [$fileLocation] does not exist!")
        }
    }
}

processResources {
    inputs.property 'mod_id', project.property('mod_id')
    inputs.property 'mod_name', project.property('mod_name')
    inputs.property 'mod_version', project.property('mod_version')
    inputs.property 'mod_description', project.property('mod_description')
    inputs.property 'mod_authors', project.property('mod_authors')
    inputs.property 'mod_credits', project.property('mod_credits')
    inputs.property 'mod_url', project.property('mod_url')
    inputs.property 'mod_update_json', project.property('mod_update_json')
    inputs.property 'mod_logo_path', project.property('mod_logo_path')

    if (project.property('use_mixins').toBoolean()) {
        inputs.property 'refmap', interpolate(project.property('mixin_refmap'))
    }

    if (project.property('use_mixins').toBoolean()) {
        include('mixins.*.json').exclude(interpolate(project.property('mixin_refmap'))).expand('refmap': interpolate(project.property('mixin_refmap')))
    }

    // Replace various properties in mcmod.info and pack.mcmeta if applicable
    filesMatching(['mcmod.info', 'pack.mcmeta']) {
        def authors = project.property('mod_authors') as String
        expand(
                'mod_id': project.property('mod_id'),
                'mod_name': project.property('mod_name'),
                'mod_version': project.property('mod_version'),
                'mod_description': project.property('mod_description'),
                'mod_authors': "[${authors.split(',').collect { """\"${it.trim()}\"""" }.join(', ')}]",
                'mod_credits': project.property('mod_credits'),
                'mod_url': project.property('mod_url'),
                'mod_update_json': project.property('mod_update_json'),
                'mod_logo_path': project.property('mod_logo_path')
        )
    }

    if (project.property('use_access_transformer').toBoolean()) {
        rename '(.+_at.cfg)', 'META-INF/$1' // Make sure Access Transformer files are in META-INF folder
    }
}

jar {
    manifest {
        def attribute_map = [:]
        if (project.property('is_coremod').toBoolean()) {
            attribute_map['FMLCorePlugin'] = interpolate(project.property('coremod_plugin_class_name'))
            if (project.property('coremod_includes_mod').toBoolean()) {
                attribute_map['FMLCorePluginContainsFMLMod'] = true
                def currentTasks = project.gradle.startParameter.taskNames
                if (currentTasks[0] == 'build' || currentTasks[0] == 'prepareObfModsFolder' || currentTasks[0] == 'runObfClient') {
                    attribute_map['ForceLoadAsMod'] = true
                }
            }
        }
        if (project.property('use_access_transformer').toBoolean()) {
            attribute_map['FMLAT'] = interpolate(project.property('access_transformer_locations'))
        }
        attributes(attribute_map)
    }
    // Add all embedded dependencies into the jar
    from(provider { configurations.embed.collect { it.isDirectory() ? it : zipTree(it) } })
}

idea {
    module {
        inheritOutputDirs = true
    }
    project {
        settings {
            runConfigurations {
                "1. Run Obfuscated Client"(Gradle) {
                    taskNames = ["runObfClient"]
                }
                "2. Build mods"(Gradle) {
                    taskNames = ["build"]
                }
                "3. Run Obfuscated Server"(Gradle) {
                    taskNames = ["runObfServer"]
                }
                "4. Run Client"(Gradle) {
                    taskNames = ["runClient"]
                }
                "5. Run Server"(Gradle) {
                    taskNames = ["runServer"]
                }
            }
            compiler.javac {
                afterEvaluate {
                    javacAdditionalOptions = "-encoding utf8"
                    moduleJavacAdditionalOptions = [
                            (project.name + ".main"): tasks.compileJava.options.compilerArgs
                                    .collect { '"' + it + '"' }.join(' ')
                    ]
                }
            }
        }
    }
}

compileTestJava {
    sourceCompatibility = targetCompatibility = 8
}

test {
    javaLauncher.set(javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(8)
    })
}

tasks.register('generateMixinJson') {
    group 'cleanroom helpers'
    onlyIf {
        def file = project.file("src/main/resources/mixins.${interpolate(property('name'))}.json")
        if (file.exists()) {
            project.logger.lifecycle("mixins.${interpolate(property('name'))}.json already exists. If you wish to generate it again, delete the existing file first.")
            return false
        }
        return true
    }
    doLast {
        def file = project.file("src/main/resources/mixins.${interpolate(property('name'))}.json")
        file << """{\n\t"package": "${interpolate(property('package'))}",\n\t"required": true,\n\t"refmap": "\${mixin_refmap}",\n\t"target": "@env(DEFAULT)",\n\t"minVersion": "0.8.5",\n\t"compatibilityLevel": "JAVA_8",\n\t"mixins": [],\n\t"server": [],\n\t"client": []\n}"""
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    if (project.use_modern_java_syntax.toBoolean()) {
        if (it.name in ['compileMcLauncherJava', 'compilePatchedMcJava']) {
            return
        }
        sourceCompatibility = 17
        options.release.set(8)
        javaCompiler.set(javaToolchains.compilerFor {
            languageVersion.set(JavaLanguageVersion.of(17))
            vendor.set(JvmVendorSpec.AZUL)
        })
    }
}

if (project.use_modern_java_syntax.toBoolean()) {
    tasks.withType(Javadoc).configureEach {
        sourceCompatibility = 17
    }
}

tasks.named('injectTags', InjectTagsTask).configure {
    onlyIf {
        !it.getTags().get().isEmpty()
    }
    it.outputClassName.set(interpolate(project.property('tag_class_name')))
}


idea.project.settings {
    taskTriggers {
        if (property('generate_mcmod_info').toBoolean()) {
            afterSync 'generateMcModInfo'
        }
        if (property('generate_pack_mcmeta').toBoolean()) {
            afterSync 'generatePackMcMeta'
        }
        afterSync 'injectTags'
    }
}

apply from: 'publishing.gradle'
apply from: 'extra.gradle'


void assertProperty(String propertyName) {
    def property = project.findProperty(propertyName)
    if (property == null) {
        throw new GradleException("Property ${propertyName} is not defined!")
    }
    if (property.isEmpty()) {
        throw new GradleException("Property ${propertyName} is empty!")
    }
}

void assertSubProperties(String propertyName, String... subPropertyNames) {
    assertProperty propertyName
    if (project.findProperty(propertyName).toBoolean()) {
        for (String subPropertyName : subPropertyNames) {
            assertProperty subPropertyName
        }
    }
}


void warnAndSetDefaultProperty(String propertyName, defaultValue) {
    def property = project.findProperty(propertyName)
    def exists = true
    if (property == null) {
        exists = false
        project.logger.log(LogLevel.WARN, "Property ${propertyName} is not defined!")
    } else if (property.isEmpty()) {
        exists = false
        project.logger.log(LogLevel.WARN, "Property ${propertyName} is empty!")
    }
    if (!exists) {
        project.setProperty(propertyName, defaultValue.toString())
    }
}

void assertEnvironmentVariable(String propertyName) {
    def property = System.getenv(propertyName)
    if (property == null) {
        throw new GradleException("System Environment Variable $propertyName is not defined!")
    }
    if (property.isEmpty()) {
        throw new GradleException("Property $propertyName is empty!")
    }
}

String interpolate(value) {
    if (value instanceof GString) {
        return value
    }
    return new SimpleTemplateEngine().createTemplate(value).make(project.properties).toString()
}


task coreJar(type: Jar) {
    archiveFileName = "Mekanism-CE-Unofficial-${project.version}.jar"
    dependsOn 'reobfJar'
    archiveClassifier = "core"

    from('etc/core') {
        include '*.info'
        expand 'mod_id': project.property('mod_id'),
                'mod_name': project.property('mod_name'),
                'mod_version': project.property('mod_version'),
                'mod_description': project.property('mod_description'),
                'mod_authors': project.property('mod_authors'),
                'mod_credits': project.property('mod_credits'),
                'mod_url': project.property('mod_url'),
                'mod_update_json': project.property('mod_update_json'),
                'mod_logo_path': project.property('mod_logo_path'),
                'mcmp_version': project.property('mcmp_version')

    }

    from zipTree(jar.outputs.getFiles().getSingleFile()).matching {
        exclude 'mekanism/tools/**', 'mekanism/generators/**', 'assets/mekanismtools/**', 'assets/mekanismgenerators/**', 'mcmod.info'
    }

    //manifest(setMainManifestProps)
}

task toolsJar(type: Jar) {
    archiveFileName = "Mekanism-CE-Unofficial-Tools-${project.version}.jar"
    dependsOn 'reobfJar'
    archiveClassifier = "tools"

    from('etc/tools') {
        include '*.info'
        expand 'mod_id': project.property('mod_id'),
                'mod_name': project.property('mod_name'),
                'mod_version': project.property('mod_version'),
                'mod_description': project.property('mod_description'),
                'mod_authors': project.property('mod_authors'),
                'mod_credits': project.property('mod_credits'),
                'mod_url': project.property('mod_url'),
                'mod_update_json': project.property('mod_update_json'),
                'mod_logo_path': project.property('mod_logo_path'),
                'mcmp_version': project.property('mcmp_version')
    }

    from zipTree(jar.outputs.getFiles().getSingleFile()).matching {
        include 'mekanism/tools/**', 'assets/mekanismtools/**'
    }
}

task generatorsJar(type: Jar) {
    archiveFileName = "Mekanism-CE-Unofficial-Generators-${project.version}.jar"
    dependsOn 'reobfJar'
    archiveClassifier = "generators"

    from('etc/generators') {
        include '*.info'
        expand 'mod_id': project.property('mod_id'),
                'mod_name': project.property('mod_name'),
                'mod_version': project.property('mod_version'),
                'mod_description': project.property('mod_description'),
                'mod_authors': project.property('mod_authors'),
                'mod_credits': project.property('mod_credits'),
                'mod_url': project.property('mod_url'),
                'mod_update_json': project.property('mod_update_json'),
                'mod_logo_path': project.property('mod_logo_path'),
                'mcmp_version': project.property('mcmp_version')
    }

    from zipTree(jar.outputs.getFiles().getSingleFile()).matching {
        include 'mekanism/generators/**', 'assets/mekanismgenerators/**'
    }
}


task apiJar(type: Jar) {
    archiveClassifier = "api"
    archiveBaseName = "Mekanism-CE-Unofficial"
    dependsOn "sourcesJar"
    include 'mekanism/api/**'
    from sourceSets.main.java.srcDirs
    from sourceSets.main.output
}

task fullBuild(type: Delete) {
    delete jar
    dependsOn("build")
}

artifacts {
    archives jar
    archives apiJar
    archives coreJar
    archives toolsJar
    archives generatorsJar
}

